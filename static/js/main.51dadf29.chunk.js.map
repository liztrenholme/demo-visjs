{"version":3,"sources":["lib/sdk/index.js","components/network/index.js","components/main/index.js","App.js","serviceWorker.js","index.js"],"names":["getData","async","console","log","page","url","concat","data","fetch","then","blob","json","e","NetworkVis","props","nodes","edges","options","layout","hierarchical","improvedLayout","color","interaction","hover","navigationButtons","height","configure","physics","visRef","useRef","useEffect","current","Network","graph","_jsx","className","children","events","style","ref","Main","Component","constructor","arguments","state","stateMode","nationalMode","selectedState","availableStates","anchored","updating","animationEnabled","handleAddPage","this","setState","handleFetchData","prevData","newData","clearViz","currentTarget","value","chooseState","selectNode","id","push","updateVis","dragStart","event","updated","filter","node","dragEnd","pointer","temp","length","x","canvas","y","doubleClick","animationOn","barnesHut","gravitationalConstant","centralGravity","springLength","springConstant","damping","minVelocity","toggleAnimation","componentDidMount","render","nodesDivisions","Pacific","label","Southwest","Atlantic","Central","Southeast","Northwest","nodesForUse","forEach","i","full_name","shape","shadow","scaling","min","max","enabled","selectable","name","conference","city","abbreviation","division","Object","keys","map","from","to","_jsxs","onClick","App","Boolean","window","location","hostname","match","ReactDOM","React","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.51dadf29.chunk.js","sourcesContent":["import 'whatwg-fetch';\n\nexport const getData = async (page) => {\n  console.log('page is...', page)\n  const url = `https://free-nba.p.rapidapi.com/teams?page=${page}`;\n\n  let data = {};\n  try {\n    data = await fetch(url, {\n      'method': 'GET',\n      'headers': {\n        'Content-Type': 'application/json',\n        'x-rapidapi-host': 'free-nba.p.rapidapi.com',\n        'x-rapidapi-key': 'ca93407b12msh6207f84fb92a18ep1d6b56jsn4ab719b2e4d0'\n      }\n    })\n      .then(blob => blob.json());\n  console.log('data...', data)\n    return(data);\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.log(e, 'Error fetching data');\n    return(e);\n  }\n};","import React, {useRef, useEffect} from 'react';\nimport PropTypes, { bool, object } from 'prop-types';\nimport { Network } from 'vis-network';\nimport './network.css';\nimport style from 'vis-network/styles/vis-network.css';\n \nfunction NetworkVis (props) {\n  const {nodes, edges} = props\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const options = {\n    layout: {\n      hierarchical: false,\n      improvedLayout: true\n    },\n    edges: {\n      color: '#000000'\n    },\n    interaction: { \n      hover: true,\n      navigationButtons: true\n    },\n    height: '800px',\n    nodes: {\n      // color: 'purple'\n    },\n    configure: true,\n    physics: true\n  };\n  const visRef = useRef(null)\n  useEffect(() => {\n    // eslint-disable-next-line no-unused-vars\n    const network = visRef.current &&\n      new Network(visRef.current, { nodes, edges }, options);\n  // eslint-disable-next-line no-use-before-define\n  }, [visRef, nodes, edges, options]);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  \n    const graph = {\n      nodes: nodes, edges: edges\n    };\n    return (\n      <div className=\"network\">\n        <div\n          graph={graph}\n          options={options}\n          events={props.events}\n          style={style}\n          ref={visRef}\n        />\n      </div>\n    );\n}\n\nNetworkVis.propTypes = {\n  data: PropTypes.object,\n  nodes: PropTypes.array,\n  edges: PropTypes.array,\n  ohioMode: PropTypes.bool,\n  selectNode: PropTypes.func,\n  events: PropTypes.object,\n  physics: PropTypes.oneOfType([object, bool])\n};\nexport default NetworkVis;","/* eslint-disable no-unused-vars */\nimport React, { Component } from 'react';\nimport {getData} from '../../lib/sdk';\nimport './main.css';\nimport {DataSet} from 'vis-data'\nimport Network from '../network';\n\nclass Main extends Component {\n  state = {\n    data: {},\n    stateMode: true,\n    nationalMode: false,\n    selectedState: 'Ohio',\n    availableStates: [],\n    anchored: [],\n    updating: false,\n    animationEnabled: true,\n    page: 1\n  };\n\n  async componentDidMount() {\n    const data = await getData(this.state.page);\n    if (data && data.data) {\n      this.setState({data: data.data});\n    }\n  }\n\n  handleAddPage = () => {\n    const {page} = this.state\n    this.setState({page: page + 1})\n    this.handleFetchData(page + 1)\n  }\n\n  handleFetchData = async (page) => {\n    const data = await getData(page);\n    const prevData = this.state.data\n    if (data && data.data) {\n      const newData = prevData.concat(data.data)\n      this.setState({data: newData});\n    }\n  }\n  clearViz = (e) => this.setState({stateMode: false, nationalMode: false, selectedState: e.currentTarget.value}, () => {\n    this.chooseState();\n  });\n  chooseState = () => {\n    this.setState({stateMode: true});\n  }\n\n  selectNode = (id) => () => {\n    const {anchored} = this.state;\n    anchored.push(id);\n    // this.setState({anchored});\n  }\n\n  updateVis = () => this.setState({updating: true})\n\n  events = {\n    // select: (event) => {\n    //   var { nodes, edges } = event;\n    // },\n    dragStart: (event) => {\n      var { nodes } = event;\n      const temp = this.state.anchored;\n      const updated = temp.filter(node => node.id !== nodes[0]);\n      this.setState({anchored: updated});\n    },\n    dragEnd: (event) => {\n      var { nodes, edges, pointer } = event;\n      const temp = this.state.anchored;\n      if (nodes.length === 1 && edges.length > 1) {\n        return;\n      }\n      temp.push({id: nodes[0], x: pointer.canvas.x, y: pointer.canvas.y});\n      this.updateVis();\n      this.setState({anchored: temp, updating: false});\n    },\n    doubleClick: (event) => {\n      var { nodes } = event;\n      const temp = this.state.anchored;\n      const updated = temp.filter(node => node.id !== nodes[0]);\n      this.updateVis();\n      this.setState({anchored: updated, updating: false});\n    }\n  };\n\n\n  animationOn = {\n    barnesHut: {\n      gravitationalConstant: -12000,\n      centralGravity: 0.9,\n      springLength: 95,\n      springConstant: 0.04,\n      damping: 1,\n      // avoidOverlap: 0.04\n    },\n    minVelocity: 0.07\n  }\n  toggleAnimation = () => this.state.animationEnabled \n    ? this.setState({animationEnabled: false}) : this.setState({animationEnabled: true})\n\n  render() {\n    const { data, stateMode } = this.state;\n    const nodesDivisions = {\n      Pacific: {\n        id: 'Pacific',\n        label: 'Pacific'        \n      }, \n      Southwest: {\n        id: 'Southwest',\n        label: 'Southwest'\n      }, \n      Atlantic: {\n        id: 'Atlantic',\n        label: 'Atlantic'\n      }, \n      Central: {\n        id: 'Central',\n        label: 'Central'\n      }, \n      Southeast: {\n        id: 'Southeast',\n        label: 'Southeast'\n      }, \n      Northwest: {\n        id: 'Northwest',\n        label: 'Northwest'\n      }\n    }\nconst nodesForUse = []\n   // eslint-disable-next-line no-unused-expressions\n   data && data.length \n   ? data.forEach(i => {\n     nodesForUse.push({\n     id: i.id,\n     label: i.full_name,\n     shape: 'circle',\n     shadow: true,\n     scaling: {min: 0, max: 100, label: {enabled: true}},\n     selectable: true,\n     color: 'orange',\n     name: i.name,\n     conference: i.conference,\n     city: i.city,\n     abbreviation: i.abbreviation,\n     division: i.division\n   })\n })\n  : null\n    Object.keys(nodesDivisions).forEach(i => {\n      nodesForUse.push(nodesDivisions[i])\n    })\n\n    const allEdges = data && data.length \n      ? data.map(i => {return({ from: i.division, to: i.id });}) : [];\n      const edges = allEdges\n    return (\n      <div className=\"main\">\n        <div className=\"main-layout\">\n          <div>\n            <button onClick={this.handleAddPage}>Add More Nodes</button>\n          </div>\n          <div className=\"visualizer\">\n              <Network \n                // data={data}\n                nodes={nodesForUse}\n                edges={edges}\n                selectNode={this.selectNode}\n                physics={this.animationEnabled} />\n          </div>\n         <footer>Data source: Free NBA via RapidAPI</footer>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import React from 'react';\nimport './App.css';\nimport Main from './components/main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}